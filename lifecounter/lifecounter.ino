#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define OLED_RESET     -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

unsigned long BAUD = 9600;

int8_t textSize = 7;
int16_t cursorX = 24;
int16_t cursorY = 8;

 // Rotary Encoder Inputs
 #define pinA 16  //D0
 #define pinB 2    //D4
 #define pinPush 0    // D3

 // Buzzer 
#define pinBuzzer 14 // D5

int buzzerTone = 100;
int buzzerDelay = 5;

int currentA;
int currentB;
int previousA;

int pushState = 0;
bool restarting = false;

int startingLife = 40;
int maxLife = 999;
int minLife = 0;
int deathTrigger = 0;
int life = startingLife;

const unsigned char deathImage [] PROGMEM = 
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x1c, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x38, 0x01, 0xc0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x38, 0x01, 0xc0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x38, 0x03, 0xc0, 0x78, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x38, 0x03, 0x80, 0x70, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x78, 0x03, 0x80, 0x70, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x70, 0x03, 0x80, 0x70, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x70, 0x07, 0x80, 0x70, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x70, 0x07, 0x80, 0x70, 0x07, 0x00, 0x00, 0x03, 0xc0, 
	0x00, 0x00, 0x1f, 0x80, 0xff, 0xff, 0x00, 0x70, 0x07, 0x00, 0x70, 0x0f, 0x00, 0x00, 0x0f, 0xc0, 
	0x00, 0x00, 0x3f, 0x00, 0x7f, 0xff, 0x00, 0x70, 0x07, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x3f, 0xc0, 
	0x00, 0x00, 0x7e, 0x00, 0x3f, 0xff, 0x00, 0x70, 0x07, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xff, 0xc0, 
	0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0x00, 0x70, 0x07, 0x00, 0xf0, 0x0e, 0x00, 0x03, 0xff, 0x80, 
	0x00, 0x01, 0xfc, 0x00, 0x1f, 0xff, 0x00, 0x70, 0x07, 0x00, 0xf0, 0x0e, 0x00, 0x07, 0xff, 0x00, 
	0x00, 0x03, 0xfc, 0x00, 0x1f, 0xff, 0x00, 0x70, 0x07, 0x00, 0xf0, 0x1e, 0x00, 0x0f, 0xfe, 0x00, 
	0x00, 0x07, 0xfc, 0x00, 0x1f, 0xff, 0x00, 0x70, 0x07, 0x00, 0x70, 0x1e, 0x00, 0x1f, 0xfe, 0x00, 
	0x00, 0x0f, 0xfc, 0x00, 0x1f, 0xff, 0x80, 0x70, 0x07, 0x00, 0x70, 0x1e, 0x00, 0x3f, 0xfc, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x1f, 0xff, 0x80, 0x70, 0x07, 0x00, 0xf0, 0x1e, 0x00, 0x7f, 0xf8, 0x00, 
	0x00, 0x3f, 0xfe, 0x00, 0x1f, 0xff, 0x80, 0x70, 0x07, 0xbf, 0xff, 0x1e, 0x00, 0x7f, 0xf8, 0x00, 
	0x00, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xf0, 0x00, 
	0x00, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x70, 0x1f, 0xff, 0xff, 0xf0, 0x00, 
	0x00, 0x3f, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xf0, 0x07, 0x80, 0x70, 0x0e, 0x1f, 0xff, 0xe0, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x70, 0x03, 0x80, 0x70, 0x0e, 0x01, 0xff, 0xe0, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x70, 0x03, 0x80, 0x70, 0x0e, 0x00, 0xff, 0xf0, 0x00, 
	0x00, 0x38, 0x03, 0xff, 0xff, 0xff, 0x80, 0x70, 0x03, 0x80, 0x70, 0x0e, 0x00, 0x7f, 0xf0, 0x00, 
	0x00, 0x7f, 0x83, 0xff, 0xff, 0xff, 0x80, 0x70, 0x03, 0xc0, 0x70, 0x0e, 0x00, 0x3f, 0xf8, 0x00, 
	0x00, 0x3f, 0xe1, 0xff, 0xff, 0xff, 0x80, 0x70, 0x03, 0xc0, 0x30, 0x0e, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf3, 0xff, 0xff, 0xff, 0x80, 0x70, 0x03, 0xc0, 0x38, 0x0e, 0x00, 0x0f, 0xfc, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x78, 0x01, 0xc0, 0x38, 0x0e, 0x00, 0x07, 0xfc, 0x00, 
	0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x38, 0x01, 0xc0, 0x38, 0x06, 0x00, 0x01, 0xfe, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x38, 0x01, 0xc0, 0x38, 0x06, 0x00, 0x00, 0xfe, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x38, 0x01, 0xe0, 0x18, 0x07, 0x00, 0x00, 0x7e, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0xe0, 0x1c, 0x07, 0x00, 0x00, 0x1e, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x1c, 0x00, 0xe0, 0x1c, 0x03, 0x00, 0x00, 0x0e, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0x1c, 0x00, 0x60, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x1c, 0x00, 0x60, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x0e, 0x00, 0x70, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x0e, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);

  pinMode (pinBuzzer, OUTPUT);

  pinMode (pinA, INPUT);
  pinMode (pinB, INPUT);
  pinMode (pinPush, INPUT_PULLUP);

  Serial.begin(BAUD);

  TryBeginDisplay();

  UpdateDisplay();

  previousA = digitalRead(pinA);
}

void TryBeginDisplay() 
{
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) 
  {
    Serial.println(F("SSD1306 allocation failed"));
    // Don't proceed; blink forever
    for(int i = 0; i > -1; ++i) 
    {
      digitalWrite(LED_BUILTIN, i%2==0 == true ? LOW : HIGH);
      delay(500*((i%2)+1));
    }
  }
}

void DecrementLife() 
{
  life = max(--life, minLife);
}

void IncrementLife() 
{
  life = min(++life, maxLife);
}

void DrawBorder() 
{
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.drawRoundRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 8, WHITE);
}

void DrawLife() 
{
  if (life == deathTrigger) 
  {
    ShowDeath();
    return;
  }
  //Single Digits
  else if (life < 10) 
  {
    textSize = 7;
    cursorX = 48;
    cursorY = 8;
  }
  //Triple digits
  else if (life > 99) 
  {
    textSize = 5;
    cursorX = 20;
    cursorY = 14;
  }
  //Double digits
  else 
  {
    textSize = 7;
    cursorX = 24;
    cursorY = 8;
  }

  display.setTextSize(textSize);
  display.setTextColor(WHITE);
  display.setCursor(cursorX, cursorY);
  display.println(life);
}

void ShowDeath() 
{
  display.clearDisplay(); //remove border that was prolly already drawn
  display.drawBitmap(0, 0,  deathImage, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
  //display.invertDisplay(1);
}

void UpdateDisplay() 
{
  display.clearDisplay();
  DrawBorder();
  DrawLife();
  display.display();
}

bool IsRestarting() 
{
  pushState = digitalRead(pinPush);

  if (pushState == LOW && restarting == false)
  {
    restarting = true;    
  }  
  else if (pushState == HIGH && restarting == true) 
  {
    ESP.restart();
  }

  return restarting;
}

void PlayTone() 
{
  // if (life == deathTrigger) 
  // {
  //   return;
  // }

  tone(pinBuzzer, buzzerTone);
  delay (buzzerDelay); 
  noTone(pinBuzzer);
}

void CheckRotary() 
{
  currentA = digitalRead(pinA);
  currentB = digitalRead(pinB);

  if (currentA != previousA && currentA == LOW) 
  { 
    currentB == LOW ? DecrementLife() : IncrementLife();

    UpdateDisplay(); 

    PlayTone();
  }

  previousA = currentA;
}

void loop() 
{
  if (IsRestarting()) 
  {
    return;
  }

  CheckRotary();
}